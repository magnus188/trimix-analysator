"""
CI/CD configuration for GitHub Actions.
"""

name: Trimix Analyzer Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libfontconfig1 \
          libice6 \
          libasound2-dev \
          libpulse-dev \
          libjpeg-dev \
          libpng-dev \
          libfreetype6-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Set environment for testing
      run: |
        echo "TRIMIX_MOCK_SENSORS=1" >> $GITHUB_ENV
        echo "TRIMIX_ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DISPLAY=:99.0" >> $GITHUB_ENV

    - name: Start virtual display
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Run unit tests
      run: |
        pytest tests/ -v -m "unit and not slow" --tb=short

    - name: Run integration tests
      run: |
        pytest tests/ -v -m "integration and not slow" --tb=short

    - name: Run all tests with coverage
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort

    - name: Run black
      run: |
        black --check --diff .

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run isort
      run: |
        isort --check-only --diff .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --exit-zero

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: bandit-report.json

  build-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Set environment for testing
      run: |
        echo "TRIMIX_MOCK_SENSORS=1" >> $GITHUB_ENV
        echo "TRIMIX_ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Test application import
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from main import TrimixApp
            app = TrimixApp()
            print('✅ Application import successful')
        except Exception as e:
            print(f'❌ Application import failed: {e}')
            sys.exit(1)
        "

    - name: Test database functionality
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from utils.database_manager import db_manager
        
        # Test basic database operations
        db_manager.set_setting('test', 'ci_test', 'success')
        result = db_manager.get_setting('test', 'ci_test')
        assert result == 'success', f'Expected success, got {result}'
        print('✅ Database functionality test passed')
        "

    - name: Test sensor interface
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from utils.sensor_interface import get_sensors, get_readings
        
        # Test sensor interface
        sensors = get_sensors()
        readings = get_readings()
        assert isinstance(readings, dict), 'Readings should be a dictionary'
        assert len(readings) > 0, 'Should have some sensor readings'
        print('✅ Sensor interface test passed')
        "

  # Performance testing job (optional, runs on develop branch)
  performance:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest-benchmark

    - name: Set environment for testing
      run: |
        echo "TRIMIX_MOCK_SENSORS=1" >> $GITHUB_ENV
        echo "TRIMIX_ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run performance tests
      run: |
        pytest tests/ -v -m "slow" --benchmark-only --benchmark-sort=mean

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/
