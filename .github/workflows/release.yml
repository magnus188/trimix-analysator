name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push multi-architecture image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate release notes
      if: github.event_name == 'release'
      run: |
        echo "## ğŸš€ Docker Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Multi-architecture images published to:" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Supported architectures: ARM64, ARMv7 (Raspberry Pi)" >> $GITHUB_STEP_SUMMARY

  create-update-package:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create update package
      run: |
        mkdir -p update-package
        
        # Copy essential files for update
        cp docker-compose.yml update-package/
        cp scripts/trimix-analyzer.service update-package/
        
        # Create update script
        cat > update-package/update.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "ğŸ”„ Starting Trimix Analyzer update..."
        
        # Stop current service
        sudo systemctl stop trimix-analyzer || true
        
        # Pull new image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        
        # Update docker-compose.yml if needed
        if [ -f docker-compose.yml ]; then
          cp docker-compose.yml /opt/trimix-analyzer/
        fi
        
        # Restart service
        cd /opt/trimix-analyzer
        docker-compose down || true
        docker-compose up -d
        sudo systemctl start trimix-analyzer
        
        echo "âœ… Update complete!"
        EOF
        
        chmod +x update-package/update.sh
        
        # Create info file
        cat > update-package/update-info.json << EOF
        {
          "version": "${{ github.ref_name }}",
          "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}",
          "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "changelog_url": "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        }
        EOF
        
        # Create archive
        tar -czf trimix-analyzer-update-${{ github.ref_name }}.tar.gz -C update-package .

    - name: Upload update package to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: trimix-analyzer-update-${{ github.ref_name }}.tar.gz
        asset_name: trimix-analyzer-update-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
