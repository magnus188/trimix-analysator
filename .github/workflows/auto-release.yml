name: Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  TRIMIX_ENVIRONMENT: test
  TRIMIX_MOCK_SENSORS: true

jobs:
  auto-release:
    name: Create Automatic Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      release_url: ${{ steps.create-release.outputs.release_url }}
    permissions:
      contents: write
      pull-requests: read
    
    # Only run on main branch pushes (merged PRs) or manual dispatch
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version analysis
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Determine version bump type
      id: version-bump
      run: |
        # Check if this is a manual dispatch
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          echo "Manual dispatch: Using ${{ github.event.inputs.version_bump }} bump"
          exit 0
        fi
        
        # For push events, analyze commit messages and PR labels dynamically
        BUMP_TYPE="patch"  # Default
        
        # Get all commits in this push
        if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
          COMMIT_RANGE="${{ github.event.before }}..${{ github.event.after }}"
        else
          # First push to branch - analyze last 10 commits
          COMMIT_RANGE="HEAD~10..HEAD"
        fi
        
        echo "Analyzing commits in range: $COMMIT_RANGE"
        COMMIT_MESSAGES=$(git log --pretty=format:"%s" $COMMIT_RANGE 2>/dev/null || git log --pretty=format:"%s" -10)
        
        # Enhanced commit message analysis with conventional commits
        if echo "$COMMIT_MESSAGES" | grep -qiE "^(feat|feature)(\(.+\))?!:|BREAKING CHANGE|^major:|\[major\]"; then
          BUMP_TYPE="major"
          echo "🚨 Detected MAJOR changes (breaking changes or major features)"
        elif echo "$COMMIT_MESSAGES" | grep -qiE "^(feat|feature)(\(.+\))?:|^minor:|\[minor\]"; then
          BUMP_TYPE="minor"
          echo "✨ Detected MINOR changes (new features)"
        elif echo "$COMMIT_MESSAGES" | grep -qiE "^(fix|bugfix|hotfix)(\(.+\))?:|^patch:|\[patch\]"; then
          BUMP_TYPE="patch"
          echo "🐛 Detected PATCH changes (bug fixes)"
        fi
        
        # Enhanced PR analysis - check if this push contains merged PRs
        MERGED_PRS=$(echo "$COMMIT_MESSAGES" | grep -oE "Merge pull request #[0-9]+" | grep -oE "#[0-9]+" | tr -d '#')
        
        if [ -n "$MERGED_PRS" ]; then
          echo "🔄 Found merged PRs: $MERGED_PRS"
          
          # Analyze each merged PR for labels and content
          for PR_NUMBER in $MERGED_PRS; do
            echo "Analyzing PR #$PR_NUMBER..."
            
            # Get PR details using GitHub API
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" 2>/dev/null)
            
            if [ $? -eq 0 ] && [ -n "$PR_DATA" ]; then
              # Extract labels
              LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name' 2>/dev/null | tr '\n' ' ')
              # Extract PR title and body
              PR_TITLE=$(echo "$PR_DATA" | jq -r '.title' 2>/dev/null)
              PR_BODY=$(echo "$PR_DATA" | jq -r '.body' 2>/dev/null)
              
              echo "PR #$PR_NUMBER labels: $LABELS"
              echo "PR #$PR_NUMBER title: $PR_TITLE"
              
              # Check labels for version bump indicators
              if echo "$LABELS" | grep -qE "(major|breaking|breaking-change)"; then
                BUMP_TYPE="major"
                echo "🚨 PR #$PR_NUMBER has major/breaking label - upgrading to MAJOR"
              elif echo "$LABELS" | grep -qE "(minor|feature|enhancement)" && [ "$BUMP_TYPE" != "major" ]; then
                BUMP_TYPE="minor"
                echo "✨ PR #$PR_NUMBER has feature label - upgrading to MINOR"
              elif echo "$LABELS" | grep -qE "(patch|bugfix|bug|hotfix)" && [ "$BUMP_TYPE" = "patch" ]; then
                echo "🐛 PR #$PR_NUMBER has bugfix label - keeping PATCH"
              fi
              
              # Check PR title and body for conventional commit patterns
              COMBINED_TEXT="$PR_TITLE $PR_BODY"
              if echo "$COMBINED_TEXT" | grep -qiE "BREAKING CHANGE|breaking:"; then
                BUMP_TYPE="major"
                echo "🚨 PR #$PR_NUMBER contains breaking changes - upgrading to MAJOR"
              elif echo "$COMBINED_TEXT" | grep -qiE "^feat|^feature|feat:|feature:" && [ "$BUMP_TYPE" != "major" ]; then
                BUMP_TYPE="minor"
                echo "✨ PR #$PR_NUMBER contains features - upgrading to MINOR"
              fi
            else
              echo "⚠️ Could not fetch details for PR #$PR_NUMBER"
            fi
          done
        fi
        
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "🎯 Final determination: $BUMP_TYPE bump for this release"
        echo "📝 Based on analysis of commits and merged PRs"

    - name: Bump version
      id: bump-version
      run: |
        # Use the version manager script to bump the version
        NEW_VERSION=$(python scripts/version_manager.py bump ${{ steps.version-bump.outputs.bump_type }} --ci --description="Automated release from main branch")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Bumped version to: $NEW_VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          COMMIT_RANGE="HEAD"
        else
          COMMIT_RANGE="$LAST_TAG..HEAD"
        fi
        
        # Get all commits since last release
        CHANGES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --reverse)
        
        CHANGELOG="## Release v${{ steps.bump-version.outputs.new_version }}

        ### Changes
        $CHANGES

        Released: $(date -u +%Y-%m-%d)"
        
        # Save changelog
        echo "$CHANGELOG" > CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT


    - name: Run fast tests before release
      run: |
        echo "🧪 Running tests before creating release..."
        python -m pytest tests/ -v -m "not slow" --tb=short --maxfail=3
        echo "✅ Tests passed, proceeding with release"

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add version.py
        git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }} [skip ci]"

    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.bump-version.outputs.new_version }}" -m "Release v${{ steps.bump-version.outputs.new_version }}"
        git push origin main --tags

    - name: Create GitHub release
      id: create-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release using GitHub CLI
        RELEASE_URL=$(gh release create "v${{ steps.bump-version.outputs.new_version }}" \
          --title "Trimix Analyzer v${{ steps.bump-version.outputs.new_version }}" \
          --notes-file CHANGELOG.md \
          --target main)
        
        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        echo "Created release: $RELEASE_URL"

    - name: Generate release summary
      run: |
        # Get dynamic statistics for the release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMIT_COUNT=$(git rev-list $LAST_TAG..HEAD --count)
          CONTRIBUTORS=$(git log $LAST_TAG..HEAD --pretty=format:'%an' | sort -u | wc -l)
          FILES_CHANGED=$(git diff --name-only $LAST_TAG..HEAD | wc -l)
          MERGED_PRS=$(git log $LAST_TAG..HEAD --merges --pretty=format:"%s" | grep -c "Merge pull request" || echo "0")
        else
          COMMIT_COUNT=$(git rev-list HEAD --count)
          CONTRIBUTORS=$(git log --pretty=format:'%an' | sort -u | wc -l)
          FILES_CHANGED=$(git ls-files | wc -l)
          MERGED_PRS="0"
        fi
        
        echo "## 🎉 Auto Release Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Release Overview" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ steps.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: ${{ steps.version-bump.outputs.bump_type }} release" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: \`v${{ steps.bump-version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL**: ${{ steps.create-release.outputs.release_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Date**: $(date -u +%Y-%m-%d\ %H:%M\ UTC)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Release Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **Commits included**: $COMMIT_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Pull requests merged**: $MERGED_PRS" >> $GITHUB_STEP_SUMMARY
        echo "- **Files changed**: $FILES_CHANGED" >> $GITHUB_STEP_SUMMARY
        echo "- **Contributors**: $CONTRIBUTORS" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: Raspberry Pi (native)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: 3.11+" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. **Automated Build**: Release build workflow will start automatically" >> $GITHUB_STEP_SUMMARY
        echo "2. **Package Creation**: Source package will be built and attached" >> $GITHUB_STEP_SUMMARY
        echo "3. **Testing**: Comprehensive release testing will run" >> $GITHUB_STEP_SUMMARY
        echo "4. **Auto-Update**: Applications can now update to this version" >> $GITHUB_STEP_SUMMARY
        echo "5. **Deployment**: Ready for production deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Version Detection Analysis" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "- **Trigger**: Manual dispatch" >> $GITHUB_STEP_SUMMARY
          echo "- **Selection**: ${{ steps.version-bump.outputs.bump_type }} bump manually selected" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Trigger**: PR merge to main branch" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis**: Dynamic analysis of commits and PR labels" >> $GITHUB_STEP_SUMMARY
          echo "- **Detection**: ${{ steps.version-bump.outputs.bump_type }} bump automatically determined" >> $GITHUB_STEP_SUMMARY
          if [ "$MERGED_PRS" -gt "0" ]; then
            echo "- **PR Integration**: Analyzed $MERGED_PRS merged pull request(s)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Quick Install" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Download latest release" >> $GITHUB_STEP_SUMMARY
        echo "wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.bump-version.outputs.new_version }}/trimix-analyzer-v${{ steps.bump-version.outputs.new_version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

